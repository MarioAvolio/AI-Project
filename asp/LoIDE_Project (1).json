{"language":"asp","engine":"dlv2","executor":"embAspServerExecutor","option":[{"name":"free choice","value":["--no-facts"]}],"runAuto":"on","tabname":["L P 1"],"program":["#show transitive_subgenre/2.\r\n\r\n% artist_of(X,Y): X is the artist of the Y music work\r\n% ¨ member_of(X,Y): X is member of the band Y\r\n% ¨ music_genre(X,Y): Y is the genre of the music\r\n% work X\r\n% ¨ subgenre(X,Y): X is subgenre of Y\r\n% ¨ plays_genre(X,Y): X plays music of genre Y\r\n\r\n\r\n% genres\r\n% genre(black_music).\r\n% genre(funk).\r\n% genre(jazz_funk).\r\n% genre(raw_funk).\r\n% genre(rap).\r\n% genre(trap).\r\n% subgenres\r\nsubgenre(funk,black_music).\r\nsubgenre(rap,black_music).\r\nsubgenre(raw_funk,funk).\r\nsubgenre(jazz_funk,funk).\r\nsubgenre(trap,rap).\r\n% music works and genre\r\nmusic_genre(the_grunt,raw_funk).\r\nmusic_genre(escapeism,jazz_funk).\r\nmusic_genre(milk_n_honey,trap).\r\nmusic_genre(tints,funk).\r\nmusic_genre(tints,rap).\r\n% band and members\r\nsinger(james_brown).\r\nband(jbs).\r\nmusician(maceo_parker).\r\nmember_of(james_brown,jbs).\r\nmember_of(fred_wesley,jbs).\r\nmember_of(maceo_parker,jbs).\r\nmember_of(bootsy_collins,jbs).\r\nmember_of(bobby_bird,jbs).\r\n% singer\r\nsinger(anderson_paak).\r\nmusician(anderson_paak).\r\n% songs - albums\r\nmusic_work(the_grunt).\r\nmusic_work(escape_ism).\r\n% artists of songs\r\nartist_of(jbs,the_grunt).\r\nartist_of(jbs,escape_ism).\r\n\r\n\r\n% Music KB: 2 – Axiomatization#1\r\n% n Infer genres from relations\r\n% ¨We don’t want to specify that X is a genre\r\n% explicitly;\r\n% n Comment in the fact program all the explicit facts\r\n% with predicate genre(X)\r\n% ¨We want to infer that X is a genre by using the\r\n% relations that mention genres:\r\n% n Add to the rules’ program the following rules:\r\n% ¨ X is a genre if it is (subgenre of something or the\r\n% supergenre of something) – [disjunction in the body?]\r\n% ¨ X is a genre if it is the music genre of something\r\n\r\ngenre(X) :- subgenre(X,_).\r\ngenre(X) :- subgenre(_,X).\r\ngenre(X) :- music_genre(X,_).\r\n\r\n\r\n% Music KB: 2 – Axiomatization#2\r\n% n Inheritance with unary predicates\r\n% ¨ Unary predicates represent classes of individuals\r\n% ¨ Express logical relationships among, artist(X) , singer(X)\r\n% , musician(X)and band(X) ; e.g. :\r\n% n if X is a singer X is a musician and an artist\r\n% ¨ (even if you don’t agree); but try to write the rule and then comment it\r\n% or remove it [conjunction in the head]\r\n% n X is an artist if X is a singer or a musician or a band\r\n\r\nmusician_artist(X) :- singer(X).\r\nartist(X) :- singer(X).\r\nartist(X) :- musician(X).\r\nartist(X) :- band(X).\r\n\r\n\r\n% Music KB: 2 – Axiomatization#3\r\n% n Transitivity of relations\r\n% ¨ Introduce a new relation transitive_subgenre(X,Y) that\r\n% represents the transitive closure of the subgenre relation\r\n% n Inverse relations\r\n% ¨ Introduce a relation recorded_by(X,Y) as the inverse of the\r\n% artist_of(X,Y) relation\r\n% n Infer artists’ genre from music genres\r\n% ¨ Introduce a relation play_genre(X,Y) that is true if an artist\r\n% has music works of a certain genre, including all super-genres \r\n\r\ntransitive_subgenre(X,Y) :- subgenre(X,Z), subgenre(Z,Y).\r\n\r\nrecorded_by(X,Y) :- artist_of(Y,X).\r\n\r\nplay_genre(X,Y) :- artist_of(X,K), music_genre(K,Y).\r\n\r\n% Music KB: 2 – Axiomatization#3 + Queries\r\n% n Try a conjunctive query; in my example:\r\n% ¨ Who does play music of trap and funk genres?\r\n% 29\r\n% n Query the KB\r\n% (queries with constants are based on\r\n% my KB; try to adapt them to yours)\r\n% ¨ Find transitive subgenre of ...\r\n% ¨ Find all the instances of the\r\n% transitive subgenre relation\r\n% ¨ Find what is recorded by\r\n% whom\r\n% ¨ Find which genre is played by\r\n% whom (and/or filter by specific\r\n% genres)\r\n\r\n"],"output_model":"ANSWER\ntransitive_subgenre(raw_funk,black_music). transitive_subgenre(jazz_funk,black_music). transitive_subgenre(trap,black_music).\n","output_error":"","tab":[""]}